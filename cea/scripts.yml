Data management:

  - name: archetypes-mapper
    label: Archetypes mapper
    description: Assign building properties and systems types from the Archetypes DataBase
    interfaces: [cli, dashboard]
    module: cea.datamanagement.archetypes_mapper
    parameters: ['general:scenario', archetypes-mapper]
    input-files:
      - [get_zone_geometry]
      - [get_building_typology]

  - name: weather-helper
    label: Weather helper
    description: Sets the weather file to use for simulation for a scenario
    interfaces: [cli, dashboard]
    module: cea.datamanagement.weather_helper
    parameters: ['general:scenario', weather-helper]

  - name: surroundings-helper
    label: Surroundings helper
    description: Query geometry of surrounding buildings from Open Street Maps
    interfaces: [cli, dashboard]
    module: cea.datamanagement.surroundings_helper
    parameters: ['general:scenario', surroundings-helper]
    input-files:
      - [get_zone_geometry]

  - name: terrain-helper
    label: Terrain helper
    description: Query topography with a fixed elevation
    interfaces: [cli, dashboard]
    module: cea.datamanagement.terrain_helper
    parameters: ['general:scenario', terrain-helper]
    input-files:
      - [get_zone_geometry]
      - [get_surroundings_geometry]

  - name: streets-helper
    label: Streets helper
    description: Query streets geometry from Open Street Maps
    interfaces: [cli, dashboard]
    module: cea.datamanagement.streets_helper
    parameters: ['general:scenario', streets-helper]
    input-files:
      - [get_surroundings_geometry]

  - name: trees-helper
    label: Trees helper
    description: Import tree geometries to scenario
    interfaces: [ cli, dashboard ]
    module: cea.datamanagement.trees_helper
    parameters: [ 'general:scenario', trees-helper ]
    input-files:
      - [ get_zone_geometry ]
      - [ get_terrain ]

Demand forecasting:
  - name: radiation
    label: Building solar radiation
    description: Use Daysim to calculate solar radiation for a scenario
    interfaces: [cli, dashboard]
    module: cea.resources.radiation.main
    parameters: ['general:scenario', 'general:multiprocessing', 'general:number-of-cpus-to-keep-free', 'general:debug',
                 radiation]
    input-files:
      - [get_database_envelope_systems]
      - [get_surroundings_geometry]
      - [get_building_architecture]
      - [get_zone_geometry]
      - [get_terrain]
      - [get_weather_file]

  - name: radiation-simplified
    label: Building solar radiation (simplified, beta)
    description: This is a faster alternative to the original radiation script. It uses Daysim to calculate solar radiation from a sample of buildings in a scenario. Please be noted that the accuarcy of the results for facades is reduced.   
    interfaces: [ cli, dashboard ]
    module: cea.resources.radiation.simplified.main
    parameters: [ 'general:scenario', 'general:multiprocessing', 'general:number-of-cpus-to-keep-free', 'general:debug',
                  radiation, radiation-simplified ]
    input-files:
      - [ get_database_envelope_systems ]
      - [ get_surroundings_geometry ]
      - [ get_building_architecture ]
      - [ get_zone_geometry ]
      - [ get_terrain ]
      - [ get_weather_file ]

  - name: schedule-maker
    label: Building occupancy
    description: Use CEA models and input schedules to estimate the occupancy profile of buildings
    interfaces: [dashboard, cli]
    module: cea.demand.schedule_maker.schedule_maker
    parameters: ['general:scenario',
                 'general:multiprocessing',
                 'general:number-of-cpus-to-keep-free',
                 'general:debug',
                 schedule-maker]
    input-files:
      - [get_database_envelope_systems]
      - [get_building_architecture]
      - [get_zone_geometry]
      - [get_terrain]
      - [get_weather_file]

  - name: demand
    label: Building energy demand
    description: Calculate the Demand
    interfaces: [cli, dashboard]
    module: cea.demand.demand_main
    parameters: ['general:scenario',
                 'general:multiprocessing',
                 'general:number-of-cpus-to-keep-free',
                 'general:debug',
                 demand]
    input-files:
      - [get_weather_file]
      - [get_database_envelope_systems]
      - [get_database_air_conditioning_systems]
      - [get_building_comfort]
      - [get_building_internal]
      - [get_building_architecture]
      - [get_building_typology]
      - [get_building_air_conditioning]
      - [get_building_supply]
      - [get_building_weekly_schedules, building_name]
      - [get_zone_geometry]
      - [get_radiation_metadata, building_name]
      - [get_radiation_building, building_name]
      - [get_schedule_model_file, building_name]

Life cycle analysis:

  - name: emissions
    label: Emissions
    description: Calculate emissions and primary energy due to building, construction, operation, dismantling and induced mobility
    interfaces: [cli, dashboard]
    module: cea.analysis.lca.main
    parameters: ['general:scenario', emissions]
    input-files:
      - [get_total_demand]
      - [get_building_architecture]
      - [get_building_typology]
      - [get_zone_geometry]
      - [get_building_supply]

  - name: system-costs
    label: System costs
    description: Calculate costs due to supply systems
    interfaces: [cli, dashboard]
    module: cea.analysis.costs.system_costs
    parameters: ['general:scenario', costs]
    input-files:
      - [get_total_demand]
      - [get_building_supply]

Energy potentials:
  - name: shallow-geothermal-potential
    label: Shallow geothermal potential
    description: Calculate the heat extracted from a geothermal probes (up to 50 m length)
    interfaces: [cli, dashboard]
    module: cea.resources.geothermal
    parameters: ['general:scenario', shallow-geothermal]

  - name: water-body-potential
    label: Water body potential
    description: Calculate the heat extracted from a lake or a water body
    interfaces: [cli, dashboard]
    module: cea.resources.water_body_potential
    parameters: ['general:scenario', water-body]

  - name: photovoltaic-thermal
    label: Photovoltaic-thermal panels
    description: Calculate electricity & heat production from photovoltaic / thermal technologies
    interfaces: [cli, dashboard]
    module: cea.technologies.solar.photovoltaic_thermal
    parameters: ['general:scenario',
                 'general:multiprocessing',
                 'general:number-of-cpus-to-keep-free',
                 'solar:buildings',
                 'solar:type-pvpanel',
                 'solar:type-scpanel',
                 'solar:panel-on-roof',
                 'solar:panel-on-wall',
                 'solar:annual-radiation-threshold',
                 'solar:solar-window-solstice',
                 'solar:t-in-pvt',
                 'solar:max-roof-coverage',
                 'solar:custom-tilt-angle',
                 'solar:panel-tilt-angle']
    input-files:
      - [get_radiation_metadata, building_name]
      - [get_zone_geometry]
      - [get_radiation_building, building_name]
      - [get_database_conversion_systems]
      - [get_weather_file]

  - name: photovoltaic
    label: Photovoltaic panels
    description: Calculate electricity production from solar photovoltaic technologies
    interfaces: [cli, dashboard]
    module: cea.technologies.solar.photovoltaic
    parameters: ['general:scenario', 'general:multiprocessing', 'solar:type-pvpanel',
                 'general:number-of-cpus-to-keep-free',
                 'solar:panel-on-roof', 'solar:panel-on-wall', 'solar:annual-radiation-threshold',
                 'solar:solar-window-solstice', 'solar:max-roof-coverage',
                 'solar:custom-tilt-angle', 'solar:panel-tilt-angle']
    input-files:
      - [get_radiation_metadata, building_name]
      - [get_zone_geometry]
      - [get_radiation_building, building_name]
      - [get_database_conversion_systems]
      - [get_weather_file]

  - name: sewage-potential
    label: Sewage heat potential
    description: Calculate the heat extracted from the sewage heat exchanger.
    interfaces: [cli, dashboard]
    module: cea.resources.sewage_heat_exchanger
    parameters: ['general:scenario', sewage]
    input-files:
      - [get_total_demand]
      - [get_demand_results_file, building_name]

  - name: solar-collector
    label: Solar collectors
    description: Calculate heat production from solar collector technologies
    interfaces: [cli, dashboard]
    module: cea.technologies.solar.solar_collector
    parameters: ['general:scenario', 'general:multiprocessing',
                 'general:number-of-cpus-to-keep-free', 'solar:type-scpanel',
                 'solar:panel-on-roof', 'solar:panel-on-wall', 'solar:annual-radiation-threshold',
                 'solar:solar-window-solstice', 'solar:t-in-sc', 'solar:buildings', 'solar:max-roof-coverage',
                 'solar:custom-tilt-angle']
    input-files:
      - [get_radiation_metadata, building_name]
      - [get_zone_geometry]
      - [get_radiation_building, building_name]
      - [get_database_conversion_systems]
      - [get_weather_file]

Networks:

  - name: network-layout
    label: Thermal network Part I (layout)
    description: Create a potential layout of the network with the minimum spanning tree
    interfaces: [cli, dashboard]
    module: cea.technologies.network_layout.main
    parameters: ['general:scenario', network-layout]
    input-files:
      - [get_street_network]
      - [get_total_demand]
      - [get_zone_geometry]

  - name: thermal-network
    label: Thermal network Part II (simulation)
    description: Solve the thermal hydraulic network
    interfaces: [cli, dashboard]
    module: cea.technologies.thermal_network.thermal_network
    parameters: ['general:scenario', 'general:multiprocessing',
                 'general:number-of-cpus-to-keep-free', 'thermal-network',
                 'thermal-network-optimization:use-representative-week-per-month']
    input-files:
      - [get_network_layout_nodes_shapefile, "thermal-network:network-type"]
      - [get_demand_results_file, building_name]
      - [get_database_conversion_systems]
      - [get_weather_file]

Optimization:

  - name: thermal-network-optimization
    label: Thermal network optimization
    description: Optimize network design variables (plant locations, layout,...)
    interfaces: [cli]
    module: cea.technologies.thermal_network.thermal_network_optimization
    parameters: ['general:scenario', 'general:multiprocessing', 'general:number-of-cpus-to-keep-free',
                 thermal-network-optimization]

  - name: decentralized
    label: Supply system Part I (decentralized)
    description: Run optimization for decentralized operation
    interfaces: [cli, dashboard]
    module: cea.optimization.preprocessing.decentralized_building_main
    parameters: ['general:scenario', 'decentralized', 'general:multiprocessing', 'general:number-of-cpus-to-keep-free']

#  - name: optimization
#    label: Supply system Part II (centralized)
#    description: Run optimization for centralized operation
#    interfaces: [cli, dashboard]
#    module: cea.optimization.optimization_main
#    parameters: ['general:debug', 'general:scenario', 'general:multiprocessing', 'general:number-of-cpus-to-keep-free', optimization]
#    input-files:
#      - [get_street_network]
#      - [get_total_demand]
#      - [get_water_body_potential]
#      - [get_sewage_heat_potential]
#      - [get_geothermal_potential]

  - name: optimization-new
    label: Supply system part II (centralized)
    description: This optimisation script is projected to replace 'Supply System Part II (centralized)', but is currently still in its final testing phase
    interfaces: [cli, dashboard]
    module: cea.optimization_new.domain
    parameters: ['general:debug', 'general:scenario', 'general:multiprocessing', 'general:number-of-cpus-to-keep-free',
                 optimization-new]
    input-files:
      - [get_street_network]
      - [get_total_demand]

Utilities:

  - name: dbf-to-csv-to-dbf
    label: DBF to CSV to DBF
    description: dbf => csv (xlsx) => dbf
    interfaces: [cli, dashboard]
    module: cea.utilities.dbf
    parameters: ['general:scenario', dbf-tools]

  - name: shp-to-csv-to-shp
    label: SHP to CSV to SHP
    description: shp => csv (xlsx) => shp
    interfaces: [ cli, dashboard ]
    module: cea.utilities.shapefile
    parameters: [ 'general:scenario', shapefile-tools]

  - name: sensitivity-analysis-sampler
    label: Generate samples for SA
    description: Generate samples for sensitivity analysis using Sobol Method
    interfaces: [ cli, dashboard ]
    module: cea.utilities.sensitivity_analysis_sampler
    parameters: [ 'general:scenario', sensitivity-analysis-tools]

  - name: batch-process-workflow
    label: Batch process Workflow
    description: "Batch process the current scenario or all scenarios under this project. Design the CEA workflow below. Change the default settings under the respective tool tabs and Save to Config."
    interfaces: [ cli, dashboard ]
    module: cea.utilities.batch_process_workflow
    parameters: ['general:scenario', batch-process-workflow]

  - name: data-migrator
    label: Data migrator
    description: "Migrate older scenario inputs to the latest version.
                  Please consider running this for scenario created before v3.22.
                  NOTE: This cannot be undone - save a copy of the scenario first."
    interfaces: [ cli]
    module: cea.datamanagement.data_migrator
    parameters: [ 'general:scenario' ]
    input-files:
      - [ get_database_construction_standards ]

  - name: data-initializer
    label: Database initializer
    description: Initialize databases for CEA
    interfaces: [cli, dashboard]
    module: cea.datamanagement.data_initializer
    parameters: ['general:scenario', data-initializer]

  - name: create-new-scenario
    label: Create new scenario
    description: Creates a new scenario
    interfaces: []
    module: cea.datamanagement.create_new_scenario
    parameters: [create-new-scenario]

  - name: rename-building
    label: Rename building
    description: Renames a building in the input files
    interfaces: [cli, dashboard]
    module: cea.utilities.rename_building
    parameters: ['general:scenario', rename-building]
    input-files:
      - [get_zone_geometry]

  - name: create-mixed-use-type
    label: Create mixed-use type
    description: Creates a new use-type by aggregating values from a list of different use-types
    interfaces: [cli]
    module: cea.utilities.create_mixed_use_type
    parameters: ['general:scenario', create-mixed-use-type]
    input-files:
      - [get_database_use_types_properties]

  - name: test
    label: Test CEA
    description: Run some tests on the CEA
    interfaces: [cli]
    module: cea.tests
    parameters: [test]

  - name: run-unit-tests
    label: Unit tests
    description: Run all the unit tests in the cea/tests folder
    interfaces: [test, cli]
    module: cea.tests.run_unit_tests
    parameters: []

  - name: run-all-plots
    label: Run all plots
    description: Run all the plots for test purposes
    interfaces: [test, cli]
    module: cea.tests.run_all_plots
    parameters: ["general:project", "general:scenario", "plots", "plots-comparisons", "plots-optimization",
                 "plots-supply-system"]

default:

  - name: multi-criteria-analysis
    label: Multicriteria analysis
    description: Multicriteria analysis
    interfaces: [cli]
    module: cea.analysis.multicriteria.main
    parameters: ['general:scenario', multi-criteria]

  - name: zone-helper
    label: Zone helper
    description: Query zone geometry from Open Street Maps
    interfaces: [cli]
    module: cea.datamanagement.zone_helper
    parameters: ['general:scenario', zone-helper]
    input-files:
      - [get_database_construction_standards]

  - name: create-polygon
    label: Create Polygon
    description: Creates a polygon shapefile from a list of comma-separated coordinate tuples
    interfaces: [cli]
    module: cea.utilities.create_polygon
    parameters: ['general:scenario', create-polygon]

  - name: compile
    label: compile
    description: compile
    interfaces: [cli]
    module: cea.utilities.compile_pyd_files
    parameters: []

  - name: dashboard
    label: dashboard
    description: dashboard
    interfaces: [cli]
    module: cea.interfaces.dashboard.dashboard
    parameters: ['general:debug', 'server']

  - name: excel-to-shapefile
    label: excel-to-shapefile
    description: excel-to-shapefile
    interfaces: [cli]
    module: cea.interfaces.cli.excel_to_shapefile
    parameters: [shapefile-tools]

  - name: extract-reference-case
    label: extract-reference-case
    description: extract-reference-case
    interfaces: [cli]
    module: cea.examples.extract_reference_case
    parameters: [extract-reference-case]

  - name: list-demand-graphs-fields
    label: list-demand-graphs-fields
    description: list-demand-graphs-fields
    interfaces: [cli]
    module: cea.interfaces.cli.list_demand_graphs_fields
    parameters: ['general:scenario']

  - name: shapefile-to-excel
    label: shapefile-to-excel
    description: shapefile-to-excel
    interfaces: [cli]
    module: cea.interfaces.cli.shapefile_to_excel
    parameters: [shapefile-tools]

  - name: trace-inputlocator
    label: trace-inputlocator
    description: trace all calls to the InputLocator for a script
    interfaces: [cli]
    module: cea.tests.trace_inputlocator
    parameters: ['general:scenario', trace-inputlocator]

  - name: workflow
    label: Workflow
    description: Run a workflow.yml file from start to end
    interfaces: [cli]
    module: cea.workflows.workflow
    parameters: [workflow, 'general:scenario']

Documentation:
  - name: html
    label: html
    description: Run all documentation methods via the command line
    interfaces: [doc]
    module: cea.utilities.doc_html
    parameters: []

  - name: graphviz
    label: graphviz
    description: Render the graphviz.gv files for all scripts in the schema data
    interfaces: [doc]
    module: cea.utilities.doc_graphviz
    parameters: []

  - name: glossary
    label: glossary
    description: Updates the glossary documentation
    interfaces: [doc]
    module: cea.utilities.doc_glossary
    parameters: []

  - name: schema
    label: schema
    description: Display schema information of an (existing) file given a locator method
    interfaces: [doc]
    module: cea.utilities.doc_schemas
    parameters: ["general:scenario", schemas]

Development:
  - name: build
    label: build
    description: build a new installer for the current version
    interfaces: [dev]
    module: cea.dev.build
    parameters: [development]

  - name: release
    label: release
    description: build a new installer for the current version
    interfaces: [ dev ]
    module: cea.dev.release
    parameters: [ "development:release-version" ]

  - name: update-zenodo
    label: update-zenodo
    description: Updates relevant Zenodo references to the latest available online
    interfaces: [ dev ]
    module: cea.dev.update_zenodo
    parameters: []
